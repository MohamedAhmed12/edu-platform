<template>
  <div class="bonds mt-4" id="original" style="display:block;" >
    <div @click="select($event)"
      class="FL-main fieldsLinker col-12 col-sm-12"
      style="position: relative; width: 100%; text-align: left;"
    >
      <div
        class="FL-left"
        style="float: left; width: 40%; display: inline-block; text-align: left; white-space: nowrap;"
      >
        <h3 style="width: 100%;">
          <span>Group 1</span>
          <span>Group 2</span>
        </h3>
        <ul data-col="Group 1" style="text-align: left; list-style: none;">
          <li
            data-offset="0"
            data-name="UML Is Mean"
            style="width: 100%; position: relative;"
            v-for="question in questionData.questions"
            :key="question.id"
          >
            <div
              ondrop="LM_drop(event)"
              ondragover="LM_allowDrop(event)"
              ondragstart="LM_drag(event)"
              draggable="true"
              style="width: 80%;"
            >{{question.text}}</div>
            <i
              class="fa fa-location-arrow link"
              draggable="false"
              style="color: rgb(170, 170, 170); position: absolute; top: 21%; transform: translateY(-50%);"
              :id="`question-${question.id}`"
              @click="select($event)"
            ></i>
          </li>
        </ul>
      </div>
      <svg height="210" width="500" style="position: absolute;">
        <line x1="0" y1="210" x2="142" y2="117" style="stroke:rgb(255,0,0);stroke-width:2" />
      </svg>
      <svg height="210" width="500" style="position: absolute;">
        <line x1="0" y1="117" x2="279" y2="300" style="stroke:rgb(255,0,0);stroke-width:2" />
      </svg>
      <div class="FL-mid" style="display: inline-block; width: 20%;">
        <canvas
          id="cnv_1581874641723"
          width="150"
          height="445"
          style="width: 150px; height: 445px;"
        ></canvas>
      </div>
      <div
        class="FL-right"
        style="float: right; width: 40%; display: inline-block; text-align: left; white-space: nowrap;"
      >
        <h3 style="width: 100%;">
          <span>Group 1</span>
          <span>Group 2</span>
        </h3>
        <ul data-col="Group 2" style="text-align: left; list-style: none;">
          <li
            v-for="option in questionData.options"
            :key="option.id"
            :id="`option-${option.id}`"
            data-offset="0"
            data-name="Structure Query Language"
            data-mandatory="false"
            draggable="true"
          >
            <div
              ondrop="LM_drop(event)"
              ondragover="LM_allowDrop(event)"
              ondragstart="LM_drag(event)"
              draggable="true"
              style="width: 80%;"
            >{{option.option}}</div>
          </li>
        </ul>
      </div>
      <div v-for="question in questionData.questions" :key="question.id">
        <svg style="position: absolute;" height="210" width="500">
          <!-- <line
          v-if="lines['ques-' + question.id] != undefined && Object.values(lines['ques-' + question.id]).length"
            :x1="lines['ques-' + question.id].x1"
            :y1="lines['ques-' + question.id].y1"
            :x2="lines['ques-' + question.id].x2"
            :y2="lines['ques-' + question.id].y1"
            style="stroke:rgb(255,0,0);stroke-width:2"
          />-->
          <!-- <line x1="865" y1="380" x2="200" y2="200" style="stroke:rgb(255,0,0);stroke-width:2" /> -->
        </svg>
      </div>
      <button type="button" class="btn btn-danger btn-sm eraseLink">Rest</button>
    </div>
  </div>
</template>
<script>
export default {
  name: "MulitpleMatching",
  props: {
    question: {
      type: Object,
      default: () => ({})
    },
    questionNumber: {
      type: Number,
      default: () => 0
    }
  },
  data() {
    return {
      answers: [],
      lines: {}
    };
  },
  computed: {
    questionData() {
      return this.question.questionData.data;
    },
    questionAnswer: {
      get() {
        return this.questionNumber
          ? this.$store.getters["exams/student/answers"][this.questionNumber]
          : {};
      },
      set(answer) {
        let answers = this.$store.getters["exams/student/answers"];
        answers[this.questionNumber] = answer;
        this.$store.commit("exams/student/SET_ANSWERS", answers);
      }
    }
  },
  watch: {
    answers(val) {
      console.log("====================================");
      console.log(val);
      console.log("====================================");
      this.setAnswer();
    },
    question(val) {
      this.answer = null;
      // this.questionData.questions.forEach(q => {
      //   let el = document.getElementById(`question-${q.id}`);
      //   let { x, y } = el.getBoundingClientRect();
      //   this.lines["ques-" + q.id] = { x, y };
      // });

      if (
        this.questionAnswer &&
        this.questionAnswer.question_id == this.question.id
      ) {
        this.answer = this.questionAnswer.answer;
      }
    }
  },
  methods: {
    setAnswer() {
      let answers = this.answers.map((answer, index) => {
        return {
          type: "answer",
          id: `new_${index + 1}`,
          attributes: {
            answer_id: answer.id
          }
        };
      });
      this.questionAnswer = {
        answer: this.answers,
        question_id: this.question.id
      };
      this.$emit("setAnswer", answers);
    },
    select(e) {
      let data = e.target.getBoundingClientRect();
      console.log(data, e.target.offsetHeight);
      // let elem = document.elementFromPoint(142, 117);
      // console.log(elem);

      // this.lines["ques-" + question.id] = { x1: e.screenX, y1: e.screenY,  x2: e.screenX + 40, y2: e.screenY + 20};
      // this.lines['ques-' + question.id].y1 = e.screenY;
      this.$forceUpdate();
    }
  }
};
</script>

<style scoped>
  /* #svg {
    z-index: -1;
    float: right;
    margin-top: -63.5%;
  } */
</style>
